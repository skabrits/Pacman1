import string

j = complex(0,1)
def convert(arr):
    tensor = arr
    if type(arr) == str:
        tensor = list()
        for x in arr.split("\n"):
            if not(x == ""):
                tensor.append(list([int(j) for j in x]))
    return tensor
def convert_mas_to_graf(mas):
    graf = dict()
    for i in range(len(mas)):
        for k in range(len(mas[0])):
            if i * k != 0 and i != len(mas) - 1 and (k != len(mas[0]) - 1) and mas[i][k] == 1:
                t = []
                if mas[i-1][k] == 1:
                    t.append(k + (len(mas) - (i))*j)
                if mas[i+1][k] == 1:
                    t.append(k + (len(mas) - (i+2))*j)
                if mas[i][k+1] == 1:
                    t.append(k+1 + (len(mas) - (i+1))*j)
                if mas[i][k-1] == 1:
                    t.append(k-1 + (len(mas) - (i+1))*j)
                graf[k + (len(mas) - i - 1) * j] = t
            # elif (i == 13 and k == 0 or ):

    return graf

level = '''
0000000000000000000000000000
0111111111111001111111111110
0100001000001001000001000010
0100001000001001000001000010
0111111111111111111111111110
0100001001000000001001000010
0100001001000000001001000010
0111111001111001111001111110
0000001000001001000001000000
0000001000001001000001000000
0000001001111111111001000000
0000001001000000001001000000
0000001001000000001001000000
0111111111002222001111111110
0000001001000000001001000000
0000001001000000001001000000
0000001001111111111001000000
0000001001000000001001000000
0000001001000000001001000000
0111111111111001111111111110
0100001000001001000001000010
0100001000001001000001000010
0111001111111111111111001110
0001001001000000001001001000
0001001001000000001001001000
0111111001111001111001111110
0100000000001001000000000010
0100000000001001000000000010
0111111111111111111111111110
0000000000000000000000000000
'''

def answ(lvl = level):
    gr = convert_mas_to_graf(convert(lvl))
    # gr[1 + (30 - 13 - 1) * j] = gr[1 + (30 - 13 - 1) * j].append(27 + (30 - 13 - 1) * j)
    # gr[26 + (30 - 13 - 1) * j] = gr[26 + (30 - 13 - 1) * j].append(1 + (30 - 13 - 1) * j)
    return gr

