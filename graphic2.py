import numpy as np
import itertools
from functools import partial
import decimal

def grad_descent(func):

    def num_deriv(x):
        dx = 10 ** -10
        return [(func([x[0] + dx, x[1]]) - func(x)) / dx, (func([x[0], x[1] + dx]) - func(x)) / dx]

    def find_local_min(x):
        delt = 10 ** -10
        i = 0
        while (max(map(abs, num_deriv(x))) >= delt and i < 10 ** 4):
            res_sum = 0
            nd = num_deriv(x)
            if x[0] - 0.1 * nd[0] > 0 and x[0] - 0.1 * nd[0] < 10000:
                x[0] = x[0] - 0.1 * nd[0]
            else:
                res_sum = res_sum + 1

            if x[1] - 0.05 * nd[1] > 0 and x[1] - 0.05 * nd[1] < 1000:
                x[1] = x[1] - 0.05 * nd[1]
            else:
                res_sum = res_sum + 1

            if res_sum == 2:
                break

            i = i + 1
        return (func(x), x[0], x[1])

    arr_lm = [[(i * 400), (i * 50 + 1)] for i in range(0, 20)]
    m = min(list(map(find_local_min, arr_lm)))
    return tuple(m)

def square_eror(arr, tp):
    a, b = tuple(tp)
    return sum([(xy[1] - xy[0] * a / (xy[0] + b)) ** 2 for xy in arr]) / len(arr)

def comb(arr):
    arr1 = list()
    for i in range(19, len(arr) + 1):
        for i in itertools.combinations(arr, i):
            arr1.append(i)
    return arr1

# table = [(4, 930.5137966), (3.6, 4283.066598), (3.2, 5141.344719), (3.2, 1826.93911), (2.8, 1874.155317), (2.4, 1485.670611), (2, 1088.386168), (1.8, 1711.839526), (1.6, 694.2971419), (1.4, 1129.01216), (1.2, 1229.743192), (1, 1027.483882)]
table = [(3.6, 4283.066598), (3.2, 5141.344719), (3.2, 1826.93911), (2.8, 1874.155317), (2.4, 1485.670611), (1.8, 1711.839526), (1.6, 694.2971419), (1.4, 1129.01216), (1.2, 1229.743192), (1, 1027.483882)]
table1 = [(0.05,	2.204380191),
          (0.1,	11.99618762),
          (0.2,	10.63377635),
          (0.4,	18.41291344),
          (0.6,	23.67368901),
          (0.8,	33.31709084),
          (1,	37.46427365),
          (1.2,	41.18033088),
          (1.6,	32.44098841),
          (2,	86.13201091),
          (2.4,	75.42726985),
          (2.8,	32.22509979),
          (3.2,	47.31121441),
          (3.6,	166.0523609),
          (6,	555.5282751),
          (7,	624.4128251),
          (8,	524.5373543),
          (9,	750.2171364),
          (12,	1397.182057),
          (14,	2778.889446),
          (18,	2923.946093),
          (20,	3633.189092)]
table2 = [(0,	0),
          (4,	765,9093),
          (20,	1868,4998),
          (49,	2553,7193)]
table3 = [(0.05, 22.42512915545921), (0.1, 25.62863200291315), (0.19999999999996, 24.783722760729248), (0.39999999999997, 24.41012874329119), (0.59999999999998, 32.45493380103552), (0.79999999999999, 84.15950582965971), (1.0, 135.00823884695504), (1.20000000000001, 180.65256458348514), (1.60000000000001, 211.37706037382023), (2.00000000000001, 254.7801628610321), (2.4, 257.0305528956737), (2.8, 436.29452076723993), (3.2, 533.443608333591), (3.6, 734.6169950191838), (4.0, 876.9608284587573), (7.35, 1097.432002386328), (8.575, 1071.5718317319604), (9.8, 1293.6174907453612), (11.025, 1597.9720643092132), (12.25, 1828.0439410609688), (14.7, 1838.8159338456087), (16.2, 2487.299606025356), (17.15, 2665.618127739667), (19.6, 2656.5552917713567), (22.05, 2917.564110486791), (22.224999999999998, 2910.3002424675788), (24.3, 3627.5708525847504), (24.5, 3559.4724475503986), (28.349999999999998, 3858.812124023693), (31.75, 4461.704028720997), (36.45, 4771.080033716089), (40.5, 4833.407614948372), (41.275, 4993.35296967943), (44.550000000000004, 5049.880413908586), (53.975, 5186.655619844795), (56.699999999999996, 5237.185374379391), (63.5, 5646.26165959074), (68.85, 5737.0051208749555), (76.95, 5705.366796914722), (81.0, 5803.72284236645)]
table4 = [(0.05, 11.158213763571135), (0.1, 13.851977220949792), (0.19999999999996, 15.542192279089418), (0.39999999999997, 17.29611038429192), (0.59999999999998, 17.820182776104698), (0.79999999999999, 22.42512915545921), (1.0, 28.033831916063093), (1.20000000000001, 28.441856179503493), (1.60000000000001, 29.54268782571517), (2.00000000000001, 41.78638276710954), (2.4, 120.660151862704), (2.8, 207.7019958225582), (3.2, 296.22982519656216), (3.6, 366.64182036544287), (4.0, 468.0441449374668), (7.35, 820.3427793107755), (8.575, 1010.0155362419628), (9.8, 1411.7052059106695), (11.025, 1695.86021775019), (14.7, 2125.0274079776054), (16.2, 2490.8847228441596), (17.15, 3012.7773002732965), (19.6, 3384.0261523310714), (22.05, 4613.390513857359), (24.3, 4867.972928632567), (24.5, 5045.008706988334), (28.349999999999998, 6373.884727654383), (36.45, 6642.694787703547), (40.5, 7665.934485968314), (44.550000000000004, 8025.626173095254), (56.699999999999996, 8470.504861870168), (68.85, 8806.767698080514), (76.95, 9503.987264936311)]
table = table[::-1]
sq = list()
# a1 = comb(table1)
# a1 = [table1]
a1 = [table4]
coun = 0
for arr in a1:
    square_erorm = partial(square_eror, arr)
    cur_sq = grad_descent(square_erorm)
    print(coun/len(a1) * 100)
    sq.append(tuple(cur_sq + tuple([arr])))
    coun += 1
optimal = min(sq)
print("r2=",optimal[0]," a=",optimal[1]," b=",optimal[2], " points=", optimal[3])
print(sq)